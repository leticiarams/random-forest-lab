(defvar forest-model (quote 

(((6 4)
  (ROOT
   ("1" ("B" ("1") (6) ("0") (2)) ("C" ("0") (4) ("1") (4))
    ("D" ("1") (5) ("0") (3)) ("A" ("1") (1) ("0") (0)))
   ("0" ("A" ("1") (9) ("0") (19)) ("D" ("0") (5) ("1") (5))
    ("B" ("0") (11) ("1") (0)) ("C" ("0") (9) ("1") (4)))
   ("2" ("D" ("0") (2) ("1") (0)) ("C" ("1") (1) ("0") (1))
    ("B" ("1") (1) ("0") (0)))
   ("3" ("C" ("0") (2) ("1") (0)))
   ("4" ("C" ("0") (2) ("1") (0)) ("D" ("0") (1) ("1") (0)))
   ("5" ("D" ("1") (2) ("0") (0))) ("8" ("D" ("0") (1) ("1") (0)))))
 ((5 8 6 7 1 4)
  (ROOT
   ("0"
    ("2"
     ("S" ("B" ("0" ("0" ("0") (7) ("1") (0))) ("1" ("0" ("1") (1) ("0") (0))))
      ("C" ("1" ("1" ("1") (1) ("0") (0)) ("0" ("1") (2) ("0") (0)))
       ("0" ("0" ("0") (1) ("1") (0))))
      ("D" ("1" ("2" ("1") (1) ("0") (0)))))
     ("C" ("D" ("1" ("2" ("1") (1) ("0") (0))))
      ("B" ("0" ("0" ("0") (1) ("1") (0)))))
     ("Q" ("B" ("0" ("0" ("0") (1) ("1") (0))))))
    ("3"
     ("C" ("C" ("1" ("2" ("1") (1) ("0") (0))))
      ("A" ("0" ("0" ("0") (4) ("1") (0))) ("1" ("0" ("1") (1) ("0") (0))))
      ("B" ("0" ("0" ("0") (1) ("1") (0)))))
     ("Q" ("B" ("1" ("0" ("1") (1) ("0") (0))))
      ("A" ("1" ("0" ("1") (1) ("0") (0)))))
     ("S"
      ("A" ("0" ("0" ("0") (11) ("1") (0))) ("1" ("0" ("1") (6) ("0") (0))))
      ("B" ("0" ("0" ("0") (6) ("1") (0))) ("1" ("0" ("1") (2) ("0") (0))))
      ("C" ("0" ("0" ("0") (1) ("1") (0))))))
    ("1"
     ("S" ("C" ("0" ("0" ("0") (2) ("1") (0))))
      ("D" ("1" ("0" ("1") (2) ("0") (0))))
      ("A" ("0" ("0" ("0") (1) ("1") (0)))))
     ("C" ("C" ("1" ("0" ("1") (2) ("0") (0))) ("0" ("0" ("0") (1) ("1") (0))))
      ("D"
       ("1" ("1" ("1") (2) ("0") (0)) ("2" ("1") (1) ("0") (0))
        ("0" ("1") (1) ("0") (0)))))))
   ("2"
    ("3"
     ("S" ("A" ("0" ("0" ("0") (2) ("1") (0))))
      ("C" ("0" ("0" ("0") (1) ("1") (0))))))
    ("1" ("Q" ("D" ("0" ("0" ("0") (1) ("1") (0)))))))
   ("1"
    ("3"
     ("S" ("C" ("0" ("5" ("0") (1) ("1") (0))) ("1" ("0" ("1") (1) ("0") (0))))
      ("A" ("1" ("0" ("1") (1) ("0") (0))))
      ("B" ("0" ("0" ("0") (1) ("1") (0))) ("1" ("0" ("1") (1) ("0") (0)))))
     ("C" ("C" ("0" ("1" ("0") (1) ("1") (0))))))
    ("1"
     ("S"
      ("D" ("1" ("0" ("1") (3) ("0") (0)) ("2" ("1") (1) ("0") (0)))
       ("0" ("0" ("0") (1) ("1") (0)) ("1" ("0") (1) ("1") (0)))))
     ("C" ("D" ("1" ("3" ("1") (2) ("0") (0)) ("0" ("1") (2) ("0") (0))))))
    ("2"
     ("S"
      ("C"
       ("0" ("0" ("0") (3) ("1") (0)) ("2" ("0") (1) ("1") (0))
        ("1" ("0") (1) ("1") (0)))
       ("1" ("0" ("1") (4) ("0") (0)) ("1" ("1") (1) ("0") (0))))
      ("D" ("1" ("2" ("1") (2) ("0") (0)))))))
   ("4"
    ("3"
     ("S" ("C" ("0" ("2" ("0") (1) ("1") (0))))
      ("D" ("0" ("1" ("0") (2) ("1") (0)))))))
   ("3" ("1" ("S" ("D" ("0" ("2" ("0") (1) ("1") (0))))))
    ("3" ("S" ("C" ("0" ("1" ("0") (1) ("1") (0)))))))))
 ((2 1 4)
  (ROOT
   ("0" ("3" ("female" ("1") (6) ("0") (1)) ("male" ("0") (22) ("1") (3)))
    ("2" ("female" ("1") (6) ("0") (0)) ("male" ("0") (9) ("1") (0)))
    ("1" ("male" ("0") (13) ("1") (3)) ("female" ("1") (3) ("0") (0))))
   ("1" ("2" ("female" ("1") (3) ("0") (0)) ("male" ("0") (3) ("1") (1)))
    ("1" ("male" ("1") (1) ("0") (4)) ("female" ("1") (3) ("0") (0)))
    ("3" ("male" ("0") (3) ("1") (2)) ("female" ("1") (3) ("0") (1))))
   ("4" ("3" ("male" ("0") (2) ("1") (0)) ("female" ("0") (1) ("1") (0))))
   ("2" ("3" ("female" ("1") (1) ("0") (0)) ("male" ("0") (2) ("1") (0)))
    ("2" ("male" ("0") (1) ("1") (0))) ("1" ("male" ("0") (1) ("1") (0))))
   ("3" ("1" ("male" ("0") (1) ("1") (0)))
    ("3" ("male" ("0") (1) ("1") (0))))))
 ((7 2)
  (ROOT ("male" ("S" ("0") (54) ("1") (3)) ("C" ("0") (12) ("1") (3)))
   ("female" ("S" ("1") (16) ("0") (4)) ("C" ("1") (7) ("0") (0))
    ("Q" ("1") (1) ("0") (0)))))
 ((7 5)
  (ROOT ("1" ("S" ("1") (5) ("0") (7)) ("C" ("0") (1) ("1") (0)))
   ("0" ("S" ("0") (27) ("1") (21)) ("Q" ("1") (4) ("0") (1))
    ("C" ("1") (10) ("0") (10)))
   ("2" ("S" ("0") (8) ("1") (3)) ("C" ("1") (1) ("0") (0)))
   ("5" ("Q" ("0") (1) ("1") (0))) ("3" ("S" ("1") (1) ("0") (0)))))) )) 
(defvar results (quote 

(0.85305995 0.855 0.8524 0.8518 0.8536 0.8525) )) 
;;;;;;;;;;;;;

; Wich features are numeric? 0: not, 1: yes. *(not yet implemented)
(defvar *num-fetures* '(3 6))
; Total features *(not yet implemented)
(defvar *total-fetures* '8)
(defvar *min-fetures-sample* '2)
(defvar *max-fetures-sample* '7)
; Targets? 
(defvar *targets* '("1" "0"))

; Model parameters.

; Number os trees in the forest:
(defvar *NTrees* 5)
; How much samples will be used to build the trees?
(defvar *NSamples* 100)
; To prune the worst trees with low rating accuracy.
; Prune below THPrec.
(defvar *THPrec* 0.0)

; Test rounds 
(defvar *TRounds* 5)
; Load the datasets to memory
(defvar *TSamples_train* 30000)
(defvar *TSamples_test* 10000)

; 16280 dataset.test.csv
; 32561 dataset.training.csv
; 48841 total
; Without samples with missing data:
; 15059 dataset.test.csv
; 30162 dataset.training.csv
; 45221 total

;EOF